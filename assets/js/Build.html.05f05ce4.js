"use strict";(self.webpackChunkruri=self.webpackChunkruri||[]).push([[950],{762:(e,n,i)=>{i.r(n),i.d(n,{comp:()=>l,data:()=>d});var a=i(89);const s={},l=(0,i(336).A)(s,[["render",function(e,n){return(0,a.uX)(),(0,a.CE)("div",null,[...n[0]||(n[0]=[(0,a.Fv)('<h1 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>Build</span></a></h1><p>You need to get libcap, libseccomp, libpthread.</p><h1 id="build-using-build-c-experimental" tabindex="-1"><a class="header-anchor" href="#build-using-build-c-experimental"><span>Build using build.c(experimental)</span></a></h1><p>We are very happy to introduce a new build system for ruri: build.c<br> It&#39;s a pure C program that does not depend on any external build system.<br> IT IS A BIG STEP BACKWARDS THE HISTORY OF COMPUTER SCIENCE!!!<br> That&#39;s great ðŸ˜ƒ<br> To use it, just <code>cc build.c</code> and <code>./a.out</code>.<br> for help, see <code>./a.out -h</code>.</p><h1 id="build-using-autoconf-recommended" tabindex="-1"><a class="header-anchor" href="#build-using-autoconf-recommended"><span>Build using autoconf(recommended)</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">git clone https://github.com/Moe-hacker/ruri</span>\n<span class="line">cd ruri</span>\n<span class="line">aclocal</span>\n<span class="line">autoconf</span>\n<span class="line">./configure --enable-static</span>\n<span class="line">make</span>\n<span class="line">sudo cp ruri /usr/bin/ruri</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>NOTE:</span></a></h2><p>The test script has a part that must be run with <code>sudo</code>, <code>DO NOT</code> run <code>make test</code> on your devices!!!!</p><h2 id="build-options" tabindex="-1"><a class="header-anchor" href="#build-options"><span>Build options:</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">  --enable-coreonly       Compile core only</span>\n<span class="line">  --disable-libcap        Disable libcap support</span>\n<span class="line">  --disable-libseccomp    Disable libseccomp support</span>\n<span class="line">  --disable-rurienv       Disable .rurienv support</span>\n<span class="line">  --enable-static         Enable static build</span>\n<span class="line">  --enable-debug          Enable debug log</span>\n<span class="line">  --enable-dev            Enable dev build</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: <code>--enable-coreonly</code> will auto enable <code>--disable-libseccomp --disable-libcap --disable-rurienv</code></p><h1 id="build-using-cmake-for-downstream" tabindex="-1"><a class="header-anchor" href="#build-using-cmake-for-downstream"><span>Build using CMake(for downstream)</span></a></h1><p>(if you&#39;d prefer to use CMake)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">git clone https://github.com/Moe-hacker/ruri</span>\n<span class="line">cd ruri</span>\n<span class="line">cmake .</span>\n<span class="line">make</span>\n<span class="line">make install</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="build-options-in-cmake" tabindex="-1"><a class="header-anchor" href="#build-options-in-cmake"><span>Build options in CMake:</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">  -DBUILD_LIB=on             Compile to shared library</span>\n<span class="line">  -DDISABLE_LIBCAP=on        Disable libcap support</span>\n<span class="line">  -DDISABLE_LIBSECCOMP=on    Disable libseccomp support</span>\n<span class="line">  -DDISABLE_RURIENV=on       Disable .rurienv support</span>\n<span class="line">  -DENABLE_STATIC=on         Enable static build</span>\n<span class="line">  -DENABLE_DEBUG=on          Enable debug log</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note:</p><ul><li>-DENABLE_DEBUG=on is equivalent to the traditional build options --enable-dev plus --enable-debug</li><li>When DISABLE_RURIENV and DISABLE_LIBSECCOMP and DISABLE_LIBCAP are enabled at the same time, it is equivalent to --enable-coreonly in the traditional build process</li></ul><h2 id="other-target-in-cmake-while-configuration-complete" tabindex="-1"><a class="header-anchor" href="#other-target-in-cmake-while-configuration-complete"><span>Other target in CMake while configuration complete:</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">  format      Run clang-format steps</span>\n<span class="line">  strip       Run strip steps</span>\n<span class="line">  tidy        Run clang-tidy steps</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',20)])])}]]),d=JSON.parse('{"path":"/Build.html","title":"Build","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"NOTE:","slug":"note","link":"#note","children":[]},{"level":2,"title":"Build options:","slug":"build-options","link":"#build-options","children":[]},{"level":2,"title":"Build options in CMake:","slug":"build-options-in-cmake","link":"#build-options-in-cmake","children":[]},{"level":2,"title":"Other target in CMake while configuration complete:","slug":"other-target-in-cmake-while-configuration-complete","link":"#other-target-in-cmake-while-configuration-complete","children":[]}],"git":{"updatedTime":1757743047000,"contributors":[{"name":"Nyawww","username":"Nyawww","email":"siyueba73@gmail.com","commits":1,"url":"https://github.com/Nyawww"}],"changelog":[{"hash":"09f7bc454e587c1c9568b3f6ba0197bf99570c11","time":1757743047000,"email":"siyueba73@gmail.com","author":"Nyawww","message":"init."}]},"filePathRelative":"Build.md"}')}}]);